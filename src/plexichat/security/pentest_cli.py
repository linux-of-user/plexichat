#!/usr/bin/env python3
"""
Command-line interface for PlexiChat Advanced Penetration Testing Suite
"""

import argparse
import asyncio
import logging
import sys
from pathlib import Path
from typing import Optional

from .advanced_penetration_testing import AdvancedPenetrationTester, VulnerabilityType


def setup_logging(verbose: bool = False):
    """Setup logging configuration."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )


async def run_penetration_test(
    target_url: str,
    output_file: Optional[str] = None,
    output_format: str = 'json',
    vulnerability_types: Optional[list] = None,
    verbose: bool = False
):
    """Run penetration test with specified parameters."""
    
    setup_logging(verbose)
    logger = logging.getLogger(__name__)
    
    logger.info(f"Starting penetration test against {target_url}")
    
    # Initialize penetration tester
    tester = AdvancedPenetrationTester(target_url)
    
    # Run comprehensive test
    report = await tester.run_comprehensive_test()
    
    # Generate report
    report_content = tester.generate_report(output_format)
    
    # Output report
    if output_file:
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        logger.info(f"Report saved to {output_file}")
    else:
        print(report_content)
    
    # Print summary
    print("\n" + "="*80)
    print("PENETRATION TEST SUMMARY")
    print("="*80)
    print(f"Target: {report.target_url}")
    print(f"Endpoints Tested: {report.endpoints_tested}")
    print(f"Tests Performed: {report.tests_performed}")
    print(f"Vulnerabilities Found: {len(report.vulnerabilities)}")
    print(f"  Critical: {report.critical_count}")
    print(f"  High: {report.high_count}")
    print(f"  Medium: {report.medium_count}")
    print(f"  Low: {report.low_count}")
    print(f"  Info: {report.info_count}")
    
    if report.critical_count > 0 or report.high_count > 0:
        print("\n[WARNING] Critical or High severity vulnerabilities found!")
        print("Please review the detailed report and address these issues immediately.")
        return 1
    elif report.medium_count > 0:
        print("\n[INFO] Medium severity vulnerabilities found.")
        print("Please review the detailed report and consider addressing these issues.")
        return 0
    else:
        print("\n[SUCCESS] No critical vulnerabilities found.")
        return 0


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="PlexiChat Advanced Penetration Testing Suite",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Basic penetration test
  python -m plexichat.security.pentest_cli http://localhost:8000
  
  # Test with detailed output
  python -m plexichat.security.pentest_cli http://localhost:8000 --verbose
  
  # Save report to file
  python -m plexichat.security.pentest_cli http://localhost:8000 -o report.json
  
  # Generate HTML report
  python -m plexichat.security.pentest_cli http://localhost:8000 -o report.html --format html
  
  # Test specific vulnerability types
  python -m plexichat.security.pentest_cli http://localhost:8000 --types sql_injection xss
        """
    )
    
    parser.add_argument(
        'target_url',
        help='Target URL to test (e.g., http://localhost:8000)'
    )
    
    parser.add_argument(
        '-o', '--output',
        help='Output file path for the report'
    )
    
    parser.add_argument(
        '--format',
        choices=['json', 'html', 'text'],
        default='json',
        help='Report output format (default: json)'
    )
    
    parser.add_argument(
        '--types',
        nargs='+',
        choices=[vt.value for vt in VulnerabilityType],
        help='Specific vulnerability types to test'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Enable verbose output'
    )
    
    parser.add_argument(
        '--timeout',
        type=int,
        default=10,
        help='Request timeout in seconds (default: 10)'
    )
    
    parser.add_argument(
        '--delay',
        type=float,
        default=0.1,
        help='Delay between requests in seconds (default: 0.1)'
    )
    
    args = parser.parse_args()
    
    # Validate target URL
    if not args.target_url.startswith(('http://', 'https://')):
        print("Error: Target URL must start with http:// or https://")
        return 1
    
    # Run penetration test
    try:
        exit_code = asyncio.run(run_penetration_test(
            target_url=args.target_url,
            output_file=args.output,
            output_format=args.format,
            vulnerability_types=args.types,
            verbose=args.verbose
        ))
        return exit_code
    
    except KeyboardInterrupt:
        print("\nPenetration test interrupted by user")
        return 130
    
    except Exception as e:
        print(f"Error running penetration test: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == '__main__':
    sys.exit(main())
