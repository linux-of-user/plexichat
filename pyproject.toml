[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "plexichat"
version = "0.1.0"
description = "PlexiChat - Advanced AI Chat Platform with Plugin System"
authors = [{ name = "PlexiChat Team", email = "dev@plexichat.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "redis>=5.0.0",
    "cryptography>=41.0.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "httpx>=0.25.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "asyncpg>=0.29.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pyright>=1.1.350",
    "ruff>=0.1.8",
    "black>=23.12.0",
    "isort>=5.13.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.6.0",
    "mypy>=1.8.0",
    "bandit>=1.7.0",
    "semgrep>=1.50.0",
    "pip-audit>=2.7.0",
    "cython>=3.0.0",
    "numba>=0.58.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "faker>=20.1.0",
]

[project.urls]
Homepage = "https://github.com/plexichat/plexichat"
Repository = "https://github.com/plexichat/plexichat"
Documentation = "https://docs.plexichat.com"
"Bug Tracker" = "https://github.com/plexichat/plexichat/issues"

[project.scripts]
plexichat = "plexichat.main:main"

# Pyright Configuration
[tool.pyright]
include = ["src"]
exclude = [
    "**/__pycache__",
    "**/node_modules",
    "**/.venv",
    "**/venv",
    "**/env",
    "build",
    "dist",
    ".git",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "**/.DS_Store",
    "**/Thumbs.db",
    # Auto-generated files
    "src/plexichat/plugins_internal.py",
    "src/plexichat/plugins_internal.pyi",
    "**/generated/**",
    "**/*_generated.py",
    "**/*_pb2.py",
    "**/*_pb2.pyi",
]
extraPaths = [
    "src",
    "src/plexichat",
    "src/plexichat/core",
    "src/plexichat/infrastructure",
    "src/plexichat/interfaces",
    "src/plexichat/plugins",
]
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "standard"
useLibraryCodeForTypes = true
autoImportCompletions = true
autoSearchPaths = true
stubPath = "typings"
reportMissingImports = "warning"
reportMissingTypeStubs = "information"
reportUnusedImport = "warning"
reportUnusedClass = "information"
reportUnusedFunction = "information"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateImportUsage = "information"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverloads = "error"
reportMissingSuperCall = "information"
reportUninitializedInstanceVariable = "warning"
reportInvalidStringEscapeSequence = "error"
reportUnknownParameterType = "information"
reportUnknownArgumentType = "information"
reportUnknownLambdaType = "information"
reportUnknownVariableType = "information"
reportUnknownMemberType = "information"
reportMissingParameterType = "information"
reportMissingTypeArgument = "information"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "information"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryCast = "information"
reportUnnecessaryComparison = "information"
reportUnnecessaryContains = "information"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "warning"
reportImplicitStringConcatenation = "information"
reportUndefinedVariable = "error"
reportUnboundVariable = "error"
reportInvalidStubStatement = "error"
reportIncompleteStub = "information"
reportUnsupportedDunderAll = "warning"
reportUnusedCoroutine = "error"
reportFunctionMemberAccess = "information"
reportGeneralTypeIssues = "error"
reportPropertyTypeMismatch = "error"
reportWildcardImportFromLibrary = "warning"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallIssue = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidTypeArguments = "error"
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportRedeclaration = "error"
reportReturnType = "error"
reportTypeCommentUsage = "error"
reportUnusedExpression = "information"

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "SIM108",  # use ternary operator
    "ARG002",  # unused method argument
    "ARG001",  # unused function argument
    "TCH001",  # move application import into type-checking block
    "TCH002",  # move third-party import into type-checking block
    "TCH003",  # move standard library import into type-checking block
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    # Auto-generated files
    "src/plexichat/plugins_internal.py",
    "src/plexichat/plugins_internal.pyi",
    "**/generated/**",
    "**/*_generated.py",
    "**/*_pb2.py",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*.py" = ["S101", "ARG", "FBT"]
"src/plexichat/plugins/**/*.py" = ["PLR0913", "PLR0915"]

[tool.ruff.isort]
known-first-party = ["plexichat"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

# Black Configuration
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    # Auto-generated files
    src/plexichat/plugins_internal\.py
  | src/plexichat/plugins_internal\.pyi
  | .*/generated/.*
  | .*_generated\.py
  | .*_pb2\.py
  | \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["plexichat"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "redis",
    "cryptography",
    "passlib",
    "jose",
    "structlog",
    "prometheus_client",
    "psutil",
    "asyncpg",
    "pytest",
    "httpx",
    "uvicorn",
    "alembic",
]
skip = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    # Auto-generated files
    "src/plexichat/plugins_internal.py",
    "src/plexichat/plugins_internal.pyi",
]
skip_glob = [
    "**/generated/**",
    "**/*_generated.py",
    "**/*_pb2.py",
]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    "env/",
    ".git/",
    "__pycache__/",
    ".pytest_cache/",
    ".mypy_cache/",
    ".ruff_cache/",
    # Auto-generated files
    "src/plexichat/plugins_internal.py",
    "src/plexichat/plugins_internal.pyi",
    ".*/generated/.*",
    ".*_generated.py",
    ".*_pb2.py",
]

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "passlib.*",
    "jose.*",
    "prometheus_client.*",
    "psutil.*",
    "asyncpg.*",
    "structlog.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/plexichat",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=100",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-related",
    "performance: marks tests as performance-related",
    "plugin: marks tests as plugin-related",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src/plexichat"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/alembic/*",
    # Auto-generated files
    "src/plexichat/plugins_internal.py",
    "src/plexichat/plugins_internal.pyi",
    "*/generated/*",
    "*_generated.py",
    "*_pb2.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Pre-commit Configuration
[tool.pre-commit]
repos = [
    { repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.5.0", hooks = [
        { id = "trailing-whitespace" },
        { id = "end-of-file-fixer" },
        { id = "check-yaml" },
        { id = "check-added-large-files" },
        { id = "check-merge-conflict" },
        { id = "debug-statements" },
    ] },
    { repo = "https://github.com/psf/black", rev = "23.12.1", hooks = [{ id = "black" }] },
    { repo = "https://github.com/pycqa/isort", rev = "5.13.2", hooks = [{ id = "isort" }] },
    { repo = "https://github.com/astral-sh/ruff-pre-commit", rev = "v0.1.8", hooks = [{ id = "ruff", args = ["--fix"] }] },
    { repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.8.0", hooks = [{ id = "mypy", additional_dependencies = ["types-all"] }] }
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["plexichat*"]

[tool.setuptools.package-dir]
"" = ["src"]

# Cython extension configuration
[tool.cythonize]
language_level = 3